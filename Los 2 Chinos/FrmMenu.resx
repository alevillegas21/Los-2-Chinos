<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>